<!DOCTYPE html>
<html>
<head>
    <title>EquityVision</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <!-- AppServer: The toolkitver meta tag is required -->
    <meta name="toolkitver" content="1.0.9.6702" />
    <!-- AppServer: Place all resources under the VersionedResources subdirectory -->
    <link rel="stylesheet" type="text/css" href="VersionedResources/schema2.css" />
    <script type="text/javascript" src="VersionedResources/Client.js"></script>
    <script type="text/javascript" src="VersionedResources/app.js"></script>
    <script type="text/javascript" src="VersionedResources/scripts/RSICalculator.js"></script>
    <script type="text/javascript" src="VersionedResources/scripts/KDJCalculator.js"></script>
    <script type="text/javascript" src="VersionedResources/scripts/CCICalculator.js"></script>
    <script type="text/javascript" src="VersionedResources/scripts/MACalculator.js"></script>
    <script type="text/javascript" src="VersionedResources/scripts/RankingCalculator.js"></script>
    <link rel="stylesheet" type="text/css" href="VersionedResources/webui/css/eikonwebui.css">
    <script type="text/javascript" src="VersionedResources/libs/jquery-ui-1.11.2/external/jquery/jquery.js"></script>
    <script type="text/javascript" src="VersionedResources/libs/nova-chart-v4.24.0/scripts/TRWebChart.min.js"></script>
    <script type="text/javascript" src="VersionedResources/libs/jquery-ui-1.11.2/jquery-ui.js"></script>
    <script type="text/javascript" src="VersionedResources/libs/select2-3.5.2/select2.js"></script>
    <!--	<script type="text/javascript" src="VersionedResources/libs/jet-1.1.2/JET.js"></script>
	<script type="text/javascript" src="VersionedResources/libs/jet-1.1.2/plugins/Quotes.js"></script>-->

    <script src="VersionedResources/libs/jet/webcomponentsjs/webcomponents.min.js"></script>
    <link rel="import" href="VersionedResources/libs/jet/jet-app/jet-app.min.html">
    <link rel="import" href="VersionedResources/libs/jet/jet-plugin-quotes/jet-plugin-quotes.html">
    <link rel="import" href="VersionedResources/libs/jet/jet-plugin-quicktips/jet-plugin-quicktips.html">
    <link rel="import" href="VersionedResources/libs/jet/jet-plugin-apphits/jet-plugin-apphits.html">
    <link rel="import" href="VersionedResources/libs/jet/jet-plugin-timeseries/jet-plugin-timeseries.html">

    <script type="text/javascript" src="VersionedResources/libs/toastr/toastr.min.js"></script>
    <link rel="stylesheet" type="text/css" href="VersionedResources/libs/toastr/toastr.min.css">

    <script type="text/javascript" src="VersionedResources/libs/EikonViewChart/scripts/TRWebChart.js"></script>
    <link rel="stylesheet" type="text/css" href="VersionedResources/libs/EikonViewChart/css/trwebchart.css">

    <script type="text/javascript" src="VersionedResources/libs/SlickGrid-2.1.0/lib/jquery.event.drag-2.2.js"></script>

    <script type="text/javascript" src="VersionedResources/libs/SlickGrid-2.1.0/slick.core.js"></script>
    <script type="text/javascript" src="VersionedResources/libs/SlickGrid-2.1.0/slick.grid.js"></script>
    <script type="text/javascript" src="VersionedResources/libs/SlickGrid-2.1.0/slick.dataview.js"></script>
    <script type="text/javascript" src="VersionedResources/libs/SlickGrid-2.1.0/slick.editors.js"></script>
     <script type="text/javascript" src="VersionedResources/libs/SlickGrid-2.1.0/plugins/slick.rowselectionmodel.js"></script>
    <script type="text/javascript" language="javascript">
        function GetSupportedRankingType()
        {
            var RankingTypes = [];
            RankingTypes.push("CCI");
            RankingTypes.push("RSI");
            RankingTypes.push("KDJ");
            RankingTypes.push("SharpRatio");
            return RankingTypes;
        }

        function TimerSubscription() {
           
            SubscribeTimeSeries(TimeSeriesAllRICList);
        }
        function GetCurrentRankingType()
        {
            var RankingType = $("#RankingType").val();
            return RankingType;
        }

        function GetRankValueForRIC(strRICName)
        {
            if (!mapRICTRDistriDate.isEmpty())
            {
                CalculateTRTRRanking(strRICName);
            }
            var RankingType = GetCurrentRankingType();
            if (RankingType == "CCI")
            {
                if (!mapRICToCCIRankData.containsKey(strRICName)) {
                    return "";
                }
                else
                {
                    return mapRICToCCIRankData.get(strRICName);
                }
            }
            else if (RankingType == "RSI")
            {
                if (!mapRICToRSIRankData.containsKey(strRICName)) {
                    return "";
                }
                else {
                    return mapRICToRSIRankData.get(strRICName);
                }
            }
            else if (RankingType == "KDJ")
            {
                if (!mapRICToKDJRankData.containsKey(strRICName)) {
                    return "";
                }
                else {
                    return mapRICToKDJRankData.get(strRICName);
                }
            }
            else if (RankingType == "SharpRatio") {
                if (mapRICTRRankingData.containsKey(strRICName)) {
                    return mapRICTRRankingData.get(strRICName);
                }
            }
            else {

            }

            return 0;
        }

        function SelectRowAndUpdateChart(nRow)
        {
            var row = nRow;
            var data = grid.getData();
            var ricname = data[row]["ricname"];


            if (ricname != "") {
                selectedrow = row;

                $("#text_onedayprice").val(data[row]["onedayprice"]);
                $("#text_onedaydate").val(data[row]["onedaydate"]);
                $("#text_onedaytr").val(data[row]["onedaytr"]);
                $("#text_oneweekprice").val(data[row]["oneweekprice"]);
                $("#text_oneweekdate").val(data[row]["oneweekdate"]);
                $("#text_oneweektr").val(data[row]["oneweektr"]);
                $("#text_onemonthprice").val(data[row]["onemonthprice"]);
                $("#text_onemonthdate").val(data[row]["onemonthdate"]);
                $("#text_onemonthtr").val(data[row]["onemonthtr"]);
                $("#text_onequarterprice").val(data[row]["onequarterprice"]);
                $("#text_onequarterdate").val(data[row]["onequarterdate"]);
                $("#text_onequartertr").val(data[row]["onequartertr"]);
                $("#text_oneyearprice").val(data[row]["oneyearprice"]);
                $("#text_oneyeardate").val(data[row]["oneyeardate"]);
                $("#text_oneyeartr").val(data[row]["oneyeartr"]);

                if (mapRICTimeSeriesPriceData.containsKey(ricname))
                {
                    var DataForChart = mapRICTimeSeriesPriceData.get(ricname);

                    var RSICalculator = mapRICToRSIData.get(ricname);
                    var TechRSI1Data = RSICalculator.RSI1ValueArray;
                    var TechRSI2Data = RSICalculator.RSI2ValueArray;
                    var TechRSI3Data = RSICalculator.RSI3ValueArray;

                    var CCICalculator = mapRICToCCIData.get(ricname);
                    var TechCCIData = CCICalculator.CCIValueArray;

                    var KDJCalculator = mapRICToKDJData.get(ricname);
                    var TechKData = KDJCalculator.KValueArray;
                    var TechDData = KDJCalculator.DValueArray;
                    var TechJData = KDJCalculator.JValueArray;

                    var MACalculator = mapRICToMAData.get(ricname);
                    var TechMA5Data = MACalculator.MA5ValueArray;
                    var TechMA10Data = MACalculator.MA10ValueArray;
                    var TechMA20Data = MACalculator.MA20ValueArray;
                    var TechMA30Data = MACalculator.MA30ValueArray;

                    TRDistrX = [];
                    TRDistrY = [];

                    var structTRDate = mapRICTRDistriDate.get(ricname);
                    TRDistrX = structTRDate.XCoordinate;
                    TRDistrY = structTRDate.YCoordinate;

                    RSIXData = [];
                    RSIY1Data = [];
                    RSIY2Data = [];
                    RSIY3Data = [];

                    CCIXData = [];
                    CCIY1Data = [];
                    CCIY2Data = [];

                    KDJXData = [];
                    KDJY1Data = [];
                    KDJY2Data = [];
                    KDJY3Data = [];
                    KDJY4Data = [];

                    MAXData = [];
                    MAY1Data = [];
                    MAY2Data = [];
                    MAY3Data = [];
                    MAY4Data = [];

                    TRDate = [];
                    TRValue = [];

                    for (var i = 0; i < DataForChart.length; i++)
                    {
                        //RSIY1Data.push(DataForChart[i].CLOSE);
                        RSIY1Data.push(TechRSI1Data[i]);
                        RSIY2Data.push(TechRSI2Data[i]);
                        RSIY3Data.push(TechRSI3Data[i]);
                        RSIXData.push(new Date(Date.parse(DataForChart[i].NDA_DATE.substr(0, 10))));

                        CCIY2Data.push(TechCCIData[i]);
                        CCIXData.push(new Date(Date.parse(DataForChart[i].NDA_DATE.substr(0, 10))));

                        KDJY1Data.push(DataForChart[i].CLOSE);
                        KDJY2Data.push(TechKData[i]);
                        KDJY3Data.push(TechDData[i]);
                        KDJY4Data.push(TechJData[i]);
                        KDJXData.push(new Date(Date.parse(DataForChart[i].NDA_DATE.substr(0, 10))));

                        MAY1Data.push(TechMA5Data[i]);
                        MAY2Data.push(TechMA10Data[i]);
                        MAY3Data.push(TechMA20Data[i]);
                        MAY4Data.push(TechMA30Data[i]);
                        MAXData.push(new Date(Date.parse(DataForChart[i].NDA_DATE.substr(0, 10))));

                        TRDate.push(new Date(Date.parse(DataForChart[i].NDA_DATE.substr(0, 10))));
                        var tenor = $("#tenorlist").val()
                        if (tenor == 1) {
                            { TRValue.push(DataForChart[i].NDA_TRTN); }
                        }
                        else if (tenor == 7) {
                            { TRValue.push(DataForChart[i].NDA_TRTN_1W); }
                        }
                        else if (tenor == 30) {
                            { TRValue.push(DataForChart[i].NDA_TRTN_1M); }
                        }
                        else if (tenor == 90) {
                            { TRValue.push(DataForChart[i].NDA_TRTN_3MT); }
                        }
                        else if (tenor == 365) {
                            { TRValue.push(DataForChart[i].NDA_YR_TRTN); }
                        }
                        else { }



                    }

                        

                    var ip1 = "";
                    var rPort1 = document.getElementsByName("group1");
                    for (i = 0; i < rPort1.length; i++) {
                        if (rPort1[i].checked)
                            ip1 = rPort1[i].value;
                        if (ip1 == "RSI1")
                            RSIchart1();
                        else if (ip1 == "CCI1")
                            CCIchart1();
                        else if (ip1 == "KDJ1")
                            KDJchart1();
                        else if (ip1 == "TotalReturn1")
                            TR2chart1();
                        else if (ip1 == "MA1")
                            MAchart1();
                        else if (ip1 == "TotalReturn3")
                            TR1chart1();

                    }

                    var ip2 = "";
                    var rPort2 = document.getElementsByName("group2");
                    for (i = 0; i < rPort2.length; i++) {
                        if (rPort2[i].checked)
                            ip2 = rPort2[i].value;
                        if (ip2 == "RSI2")
                            RSIchart2();
                        else if (ip2 == "CCI2")
                            CCIchart2();
                        else if (ip2 == "KDJ2")
                            KDJchart2();
                        else if (ip2 == "TotalReturn2")
                            TR2chart2();
                        else if (ip2 == "MA2")
                            MAchart2();
                        else if (ip2 == "TotalReturn4")
                            TR1chart2();
                    }

                }
                grid.render();
                //refresh();
            }
        
        }
    </script>

    <style type="text/css">
        body
        {
            margin: 10px 10px 10px 10px;
            height: 100%;
        }

        .padder
        {
            padding: 10px 10px 10px 10px;
        }
    </style>
    <script type="text/javascript" language="javascript">
        var mapRICTimeSeriesPriceData = new Map();
        var mapRICTimeSeriesTRData = new Map();
        var mapRICTRDistriDate = new Map();
        var mapRICTRRankingData = new Map();
        var objTimeSeriesSubscription;
        var mapRICToRSIData = new Map();
        var mapRICToCCIData = new Map();
        var mapRICToKDJData = new Map();
        var mapRICToMAData = new Map();

        var mapRICToRSIRankData = new Map();
        var mapRICToCCIRankData = new Map();
        var mapRICToKDJRankData = new Map();

        var CurrentTimeSeriesRIC = "";

        var TRView = "";
        var TimeSeriesAllRICList = [];
        var RSIXData = [];
        var RSIY1Data = [];
        var RSIY2Data = [];
        var RSIY3Data = [];

        var CCIXData = [];
        var CCIY1Data = [];
        var CCIY2Data = [];

        var KDJXData = [];
        var KDJY1Data = [];
        var KDJY2Data = [];
        var KDJY3Data = [];
        var KDJY4Data = [];

        var MAXData = [];
        var MAY1Data = [];
        var MAY2Data = [];
        var MAY3Data = [];
        var MAY4Data = [];

        var TRDate = [];
        var TRValue = [];

        var TRDistrX = [];
        var TRDistrY = [];

        $(document).ready(function () {
            $('#exchangelist').change(function () {
                var ricnames = callStatelessApp('GetEquityListByExchange', $("#exchangelist").val());
                var ricnamearray = [];
                data = jQuery.parseJSON(ricnames);
                $.each(data, function (i, item) {
                    ricnamearray.push(item.RICName);
                });

                $("#supportedriclist").empty();
                for (var j = 0; j < ricnamearray.length; j++) {
                    $("#supportedriclist").append("<option value='" + ricnamearray[j] + "'>" + ricnamearray[j] + "</option>");
                }

                $("#supportedriclist").select2();
                $("#s2id_supportedriclist").css('display', 'inline-block');
            });
            
            $('#supportedriclist').change(function () {
                var SelectIndexArray = [];
                var SelectedRIC = $("#supportedriclist").val();
                var data = grid.getData();
                for (var k = 0; k < data.length; k++) {
                    if (data[k]["ricname"] == SelectedRIC) {
                        SelectIndexArray.push(k);
                        grid.setSelectedRows(SelectIndexArray);
                        grid.scrollRowIntoView(k, false);
                        SelectRowAndUpdateChart(k);
                        return;
                    }
                }

                });
            $('#tenorlist').change(function () {
                //subscribesource();
                refreshgrid();
            });

            $('#input_lowerprice').change(function () {
                range2possbility();
            });

            $('#input_upperprice').change(function () {
                range2possbility();
            });

            var arrSupportedRankingTypes = GetSupportedRankingType();
            for (var j = 0; j < arrSupportedRankingTypes.length; j++)
            {
                $("#RankingType").append("<option value='" + arrSupportedRankingTypes[j] + "'>" + arrSupportedRankingTypes[j] + "</option>");
            }
            $("#RankingType").change(function () {
                refreshgrid();
            });

        });

        function RSIchart1() {
            drawChartRSI(RSIXData, RSIY1Data, RSIY2Data, RSIY3Data, "chart1");
            //drawChartCCI(CCIXData, CCIY2Data, "chart1");
            //drawChartKDJ(KDJXData, KDJY2Data, KDJY3Data, KDJY4Data, "chart1");
            //drawChart("chart1");
        }

        function CCIchart1() {
            //drawChartRSI(RSIXData, RSIY2Data, "chart1");
            drawChartCCI(CCIXData, CCIY2Data, "chart1");
            //drawChartKDJ(KDJXData, KDJY2Data, KDJY3Data, KDJY4Data, "chart1");
            //drawChart("chart1");
        }

        function KDJchart1() {
            //drawChartRSI(RSIXData, RSIY2Data, "chart1");
            //drawChartCCI(CCIXData, CCIY2Data, "chart1");
            drawChartKDJ(KDJXData, KDJY2Data, KDJY3Data, KDJY4Data, "chart1");
            //drawChart("chart1");
        }

        function TRchart1() {
            //drawChartRSI(RSIXData, RSIY2Data, "chart1");
            //drawChartCCI(CCIXData, CCIY2Data, "chart1");
            //drawChartKDJ(KDJXData, KDJY2Data, KDJY3Data, KDJY4Data, "chart1");
            drawChart("chart1");
        }

        function MAchart1() {
            //drawChartRSI(RSIXData, RSIY2Data, "chart1");
            //drawChartCCI(CCIXData, CCIY2Data, "chart1");
            drawChartMA(MAXData, MAY1Data, MAY2Data, MAY3Data, MAY4Data, "chart1");
            //drawChart("chart1");
        }

        function RSIchart2() {
            drawChartRSI(RSIXData, RSIY1Data, RSIY2Data, RSIY3Data, "chart2");
            //drawChartCCI(CCIXData, CCIY2Data, "chart1");
            //drawChartKDJ(KDJXData, KDJY2Data, KDJY3Data, KDJY4Data, "chart1");
            //drawChart("chart1");
        }

        function CCIchart2() {
            //drawChartRSI(RSIXData, RSIY2Data, "chart1");
            drawChartCCI(CCIXData, CCIY2Data, "chart2");
            //drawChartKDJ(KDJXData, KDJY2Data, KDJY3Data, KDJY4Data, "chart1");
            //drawChart("chart1");
        }

        function KDJchart2() {
            //drawChartRSI(RSIXData, RSIY2Data, "chart1");
            //drawChartCCI(CCIXData, CCIY2Data, "chart1");
            drawChartKDJ(KDJXData, KDJY2Data, KDJY3Data, KDJY4Data, "chart2");
            //drawChart("chart1");
        }

        function TRchart2() {
            //drawChartRSI(RSIXData, RSIY2Data, "chart1");
            //drawChartCCI(CCIXData, CCIY2Data, "chart1");
            //drawChartKDJ(KDJXData, KDJY2Data, KDJY3Data, KDJY4Data, "chart1");
            drawChart("chart2");
        }

        function MAchart2() {
            //drawChartRSI(RSIXData, RSIY2Data, "chart1");
            //drawChartCCI(CCIXData, CCIY2Data, "chart1");
            drawChartMA(MAXData, MAY1Data, MAY2Data, MAY3Data, MAY4Data, "chart2");
            //drawChart("chart1");
        }

        function TR1chart1() {
            //drawChartRSI(RSIXData, RSIY2Data, "chart1");
            //drawChartCCI(CCIXData, CCIY2Data, "chart1");
            //drawChartKDJ(KDJXData, KDJY2Data, KDJY3Data, KDJY4Data, "chart1");
            drawChartTR1(TRDistrX, TRDistrY, "chart1");
        }

        function TR1chart2() {
            //drawChartRSI(RSIXData, RSIY2Data, "chart1");
            //drawChartCCI(CCIXData, CCIY2Data, "chart1");
            //drawChartKDJ(KDJXData, KDJY2Data, KDJY3Data, KDJY4Data, "chart1");
            drawChartTR1(TRDistrX, TRDistrY, "chart2");
        }

        function TR2chart1() {
            //drawChartRSI(RSIXData, RSIY2Data, "chart1");
            //drawChartCCI(CCIXData, CCIY2Data, "chart1");
            //drawChartKDJ(KDJXData, KDJY2Data, KDJY3Data, KDJY4Data, "chart1");
            drawChartTR2(TRDate,TRValue,"chart1");
        }
        
        function TR2chart2() {
            //drawChartRSI(RSIXData, RSIY2Data, "chart1");
            //drawChartCCI(CCIXData, CCIY2Data, "chart1");
            //drawChartKDJ(KDJXData, KDJY2Data, KDJY3Data, KDJY4Data, "chart1");
            drawChartTR2(TRDate, TRValue, "chart2");
        }

        function display_alert(msg) {
            var tsType = "error";
            var tsPosition = "toast-top-left";
            var tsTitle = "";
            var tsText = msg;
            toastr.options = {
                "positionClass": tsPosition,
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut",
                "showDuration": "1000",
                "hideDuration": "1000",
                "timeOut": "2000",
                "extendedTimeOut": "1000"
            };
            if (tsTitle === '') {
                toastr[tsType](tsText);
            } else {
                toastr[tsType](tsText, tsTitle);
            }
        }

        function initialize() {

            jetInitialize();
            initControls();

        }

        var ricinfoarray = [];

        function initControls() {
            var exchangelist = callStatelessApp('GetExgNameList', null);
            var exchangearray = [];
            data = jQuery.parseJSON(exchangelist);
            $.each(data, function (i, item) {
                exchangearray.push(item);
            });
            for (var j = 0; j < exchangearray.length; j++) {
                $("#exchangelist").append("<option value='" + exchangearray[j] + "'>" + exchangearray[j] + "</option>");
            }

            var ricnames = callStatelessApp('GetEquityListByExchange', $("#exchangelist").val());
            var ricnamearray = [];
            data = jQuery.parseJSON(ricnames);
            $.each(data, function (i, item) {
                ricnamearray.push(item.RICName);
            });
            for (var j = 0; j < ricnamearray.length; j++) {
                $("#supportedriclist").append("<option value='" + ricnamearray[j] + "'>" + ricnamearray[j] + "</option>");
            }
            $("#supportedriclist").select2();

            var tenorlist = callStatelessApp('GetTenors', null);
            var tenortextarray = [];
            var tenordaysarray = [];
            data = jQuery.parseJSON(tenorlist);
            $.each(data, function (i, item) {
                tenortextarray.push(item.TenorValue);
                tenordaysarray.push(item.Days);
            });
            for (var j = 0; j < tenortextarray.length; j++) {
                $("#tenorlist").append("<option value='" + tenordaysarray[j] + "'>" + tenortextarray[j] + "</option>");
            }

            var allrics = callStatelessApp('GetEquityNameList', null);

            data = jQuery.parseJSON(allrics);
            $.each(data, function (i, item) {
                ricinfoarray.push({ "ricname": item.RICName });
            });

        }

        var subscription_array = [];

        function subscribeall(ricnamearray) {
            for (var i = 0; i < subscription_array.length ; i++) {

                if (subscription_array[i]["baseric"] != null) {
                    subscription_array[i]["baseric"].stop();
                }
            }

            // clear the array
            subscription_array.splice(0, subscription_array.length);

            TimeSeriesAllRICList = ricnamearray;
            SubscribeTimeSeries(TimeSeriesAllRICList);
            setInterval("TimerSubscription()",1000);
            for (var j = 0; j < ricnamearray.length; j++) {

                var subscription_baseric = JET.Quotes.create() // create a subscription
                .rics(ricnamearray[j]) // set a RIC
                .rawFields("TRDPRC_1", "DSPLY_NAME", "TRADE_DATE", "HST_CLOSE", "HSTCLSDATE") // set a field
                .onUpdate(function (subscription, ric, updatedValues) { // set an update handler

                    var price_val = 0.0;
                    var hstprice_val = 0.0;
                    var displayname_val;
                    var tradedate_val;
                    var hstdate_val;
                   // var onedaytr_val = 0.0;
                   // var oneweektr_val = 0.0;
                   // var onemonthtr_val = 0.0;
                   // var onequartertr_val = 0.0;
                  //  var oneyeartr_val = 0.0;

                    if (!updatedValues["TRDPRC_1"].raw || isNaN(parseFloat(updatedValues["TRDPRC_1"].raw)) || parseFloat(updatedValues["TRDPRC_1"].raw) < 0.000001) {
                        price_val = parseFloat(updatedValues["HST_CLOSE"].raw);
                    }
                    else {
                        price_val = parseFloat(updatedValues["TRDPRC_1"].raw);
                    }

                    hstprice_val = parseFloat(updatedValues["HST_CLOSE"].raw);
                    displayname_val = updatedValues["DSPLY_NAME"].formatted;
                    tradedate_val = updatedValues["TRADE_DATE"].formatted;
                    hstdate_val = updatedValues["HSTCLSDATE"].formatted;
                    //onedaytr_val = parseFloat(updatedValues["PREREAL968"].raw);
           
                    var data = grid.getData();
                    for (var k = 0; k < data.length; k++) {
                        if (data[k]["ricname"] == ric) {
                            data[k]["price"] = price_val;
                            data[k]["tradedate"] = tradedate_val;
                            data[k]["onedayprice"] = hstprice_val;
                            data[k]["displayname"] = displayname_val;
                            data[k]["ranking"] = GetRankValueForRIC(ric);
                            //data[k]["onedaytr"] = onedaytr_val;
                            //data[k]["oneweektr"] = oneweektr_val;
                            //data[k]["onemonthtr"] = onemonthtr_val;
                            //data[k]["onequartertr"] = onequartertr_val;
                            //data[k]["oneyeartr"] = oneyeartr_val;
                            grid.setData(data);
                            //grid.invalidate();
                            grid.render();
                            break;
                        }
                    }

                    //if (updatedValues["TRDPRC_1"])                             
                    //    data[k]["price"]=updatedValues["CF_LAST"].formatted;


                    if (price_val < 0.000001 || hstprice_val < 0.000001) {
                        display_alert("Price or Historical Price on RIC " + ric + " is not available!");
                        return;
                    }

                }).start();

                subscription_array.push({ ricname: ricnamearray[j], baseric: subscription_baseric });
            }


           // TimeSeriesAllRICList = ricnamearray;
           // SubscribeTimeSeries(TimeSeriesAllRICList);
            
           // TRView = "TRTN.Timestamp;TRTN.Value";
          //  SubscribeTimeSeriesTR(TimeSeriesAllRICList);
            //TRView = "TRTN_1W.Timestamp;TRTN_1W.Value";
            //SubscribeTimeSeriesTR(TimeSeriesAllRICList);
        }

        function SubscribeTimeSeries(allRICs) {
            if (null == allRICs || allRICs.length == 0) {
                return;
            }
            if (objTimeSeriesSubscription) {
                objTimeSeriesSubscription.unsubscribe()
                objTimeSeriesSubscription = null;
            }
            for (var j = 0; j < allRICs.length; j++) {
                if (allRICs[j] != "") {
                    CurrentTimeSeriesRIC = allRICs[j];
                }
                else {
                    continue;
                }
                if (!mapRICTimeSeriesPriceData.containsKey(allRICs[j])) {
                    var msg = GetTimeSeriesObject(allRICs[j]);
                    objTimeSeriesSubscription = JET.Data.TimeSeries.subscribe(msg);

                    objTimeSeriesSubscription.onUpdate(onTimeSeriesData);
                    objTimeSeriesSubscription.onError(onTimeSeriesError);
                    break;
                }
            }


        }

        function onTimeSeriesData(args) {
            //var loadOutputArea = document.getElementById("load_Output");
            //var updateOutputArea = document.getElementById("update_Output");

            if (args.length > 3000000) {// too big data
                //loadOutputArea.innerHTML = "Total Points:" + args.Data.length;
            }
            else {
                if (args.length > 0) {

                    if (!mapRICTimeSeriesPriceData.containsKey(CurrentTimeSeriesRIC)) {
                        mapRICTimeSeriesPriceData.put(CurrentTimeSeriesRIC, args);
                        // RSI Value
                        var RSIValue = new RSICalculator(CurrentTimeSeriesRIC, 6);
                        RSIValue.Calculate();
                        mapRICToRSIData.put(CurrentTimeSeriesRIC, RSIValue);

                        
                        // CCI Value
                        var CCIValue = new CCICalculator(CurrentTimeSeriesRIC, 14);
                        CCIValue.Calculate();
                        mapRICToCCIData.put(CurrentTimeSeriesRIC, CCIValue);
                        // KDJ Value
                        var KDJValue = new KDJCalculator(CurrentTimeSeriesRIC, 9);
                        KDJValue.Calculate();
                        mapRICToKDJData.put(CurrentTimeSeriesRIC, KDJValue);
                        // MR Value
                        var MAValue = new MACalculator(CurrentTimeSeriesRIC);
                        MAValue.Calculate();
                        mapRICToMAData.put(CurrentTimeSeriesRIC, MAValue);


                        var objRankCalculator = new RankingCalculator(CurrentTimeSeriesRIC);

                        var nKDJRankRet = objRankCalculator.KDJRanking(KDJValue.KValueArray,KDJValue.JValueArray);
                        if (nKDJRankRet == 1)
                        {
                            mapRICToKDJRankData.put(CurrentTimeSeriesRIC, "*****");
                        }
                        else
                        {
                            mapRICToKDJRankData.put(CurrentTimeSeriesRIC, "");
                        }

                        var nRSIRankRet = objRankCalculator.RSIRanking(RSIValue.RSI1ValueArray,RSIValue.RSI2ValueArray,RSIValue.RSI3ValueArray);
                        if (nRSIRankRet == 1) {
                            mapRICToRSIRankData.put(CurrentTimeSeriesRIC, "*****");
                        }
                        else {
                            mapRICToRSIRankData.put(CurrentTimeSeriesRIC, "");
                        }

                        var nCCIRankRet = objRankCalculator.CCIRanking(CCIValue.CCIValueArray);
                        if (nCCIRankRet == 1) {
                            mapRICToCCIRankData.put(CurrentTimeSeriesRIC, "*****");
                        }
                        else {
                            mapRICToCCIRankData.put(CurrentTimeSeriesRIC, "");
                        }

                        CalculateTRTR(CurrentTimeSeriesRIC);
                        CalculateTRTRRanking(CurrentTimeSeriesRIC);

                        var data = grid.getData();
                        for (var k = 0; k < data.length; k++) {
                            if (data[k]["ricname"] == CurrentTimeSeriesRIC) { 
                                data[k]["ranking"] = GetRankValueForRIC(CurrentTimeSeriesRIC);        
                                grid.setData(data);
                                grid.render();
                                break;
                            }
                        }
                        CurrentTimeSeriesRIC = "";
                    }
                    //loadOutputArea.innerHTML = JSON.stringify(args, null, 4);

                }

            }

            if (objTimeSeriesSubscription) {
                objTimeSeriesSubscription.unsubscribe();
                objTimeSeriesSubscription = null;
            }

            SubscribeTimeSeries(TimeSeriesAllRICList);

        }

        function onTimeSeriesError(args) {
            if (objTimeSeriesSubscription) {
                objTimeSeriesSubscription.unsubscribe();
                objTimeSeriesSubscription = null;
            }

            SubscribeTimeSeries(TimeSeriesAllRICList);
            //var loadOutputArea = document.getElementById("load_Output");
            //loadOutputArea.innerHTML = JSON.stringify(args, null, 4);
        }

        function GetTimeSeriesObject(ric) {
            var msg = {
                "ric": "AAL.L",
                "feed": "IDN",
                "view": "Nda_raw",
                "numberOfPoints": 265,
                "timeZone": "Instrument",
                "intervalType": "Daily",
                "intervalLength": 1,
                "adjustedPrice": true
            };
            msg.ric = ric;
            return msg;
        }
  
        function CalculateTRTR(ric) {
            var priceObject = mapRICTimeSeriesPriceData.get(ric);
            var closePrice = [];
            var strDate = [];
            for (i = 0; i < priceObject.length; i++) {
                if ((typeof (priceObject[i].NDA_LAST) != "undefined") && (typeof (priceObject[i].NDA_DATE) != "undefined"))
                {
                    closePrice.push(priceObject[i].NDA_LAST);
                    strDate.push(priceObject[i].NDA_DATE);
                }
            }

            closePrice.reverse();
            strDate.reverse();
            
            var myDate = new Date()  
            var strToday = myDate.toLocaleDateString()
            
            var onedaytr_val = 0.0;
            var oneweektr_val = 0.0;
            var onemonthtr_val = 0.0;
            var onequartertr_val = 0.0;
            var oneyeartr_val = 0.0;

            var trval = [-10000, -10000, -10000, -10000, -10000];
            var trPrice = [];
            var strtrDate = [];

            var data = grid.getData();
            for (var k = 0; k < data.length; k++) {
                if (data[k]["ricname"] == ric) {
                    var price = data[k]["price"];
                    var IndexIn = [1,7,30,90,365];
                    for ( var i = 0; i < IndexIn.length; i++) {
                        for (var d = 0; d < strDate.length; d++) {
                            var diff = DateDiff(strToday, strDate[d])
                            if ((diff >= IndexIn[i]) && (diff < (IndexIn[i] + 5))) {
                                trval[i] = (price - closePrice[d]) / closePrice[d] * 100;
                                trPrice[i] = closePrice[d];
                                strtrDate[i] = FormatDate(strDate[d]);
                                break;
                            }
                        }
                    }

 
                    if (trval[0] != -10000) {
                        data[k]["onedaytr"] = trval[0].toFixed(2);
                        data[k]["onedaydate"] = strtrDate[0];
                        data[k]["onedayprice"] = trPrice[0].toFixed(2);
                    }

                    if (trval[1] != -10000) {
                        data[k]["oneweektr"] = trval[1].toFixed(2);
                        data[k]["oneweekdate"] = strtrDate[1];
                        data[k]["oneweekprice"] = trPrice[1].toFixed(2);
                    }

                    if (trval[2] != -10000) {
                        data[k]["onemonthtr"] = trval[2].toFixed(2);
                        data[k]["onemonthdate"] = strtrDate[2];
                        data[k]["onemonthprice"] = trPrice[2].toFixed(2);
                    }

                    if (trval[3] != -10000) {
                        data[k]["onequartertr"] = trval[3].toFixed(2);
                        data[k]["onequarterdate"] = strtrDate[3];
                        data[k]["onequarterprice"] = trPrice[3].toFixed(2);
                    }

                    if (trval[4] != -10000) {
                        data[k]["oneyeartr"] = trval[4].toFixed(2);
                        data[k]["oneyeardate"] = strtrDate[4];
                        data[k]["oneyearprice"] = trPrice[4].toFixed(2);
                    }

                    grid.setData(data);
                    //grid.invalidate();
                    grid.render();
                    break;
                }
            }
        }

        function TRDistribution() {
            this.XCoordinate = [];
            this.YCoordinate = [];

            this.Add = Add;
            function Add(X, Y)
            {
                this.XCoordinate.push(X);
                this.YCoordinate.push(Y);
            }
            this.RemoveAll = RemoveAll;
            function RemoveAll()
            {
                this.XCoordinate = [];
                this.YCoordinate = [];
            }
        }

        function CalculateTRTRRanking(ric)
        {
            var tenor = $("#tenorlist").val()
           // mapRICTRRankingData.clear();
           // mapRICTRDistriDate.clear();
                var priceObject = mapRICTimeSeriesPriceData.get(ric);
                var TRValue = [];
                //var strDate = [];
                for (i = 0; i < priceObject.length; i++) {
                    if (tenor == 1) {
                        if (typeof (priceObject[i].NDA_TRTN) != "undefined")
                        { TRValue.push(priceObject[i].NDA_TRTN); }
                    }
                    else if (tenor == 7) {
                        if (typeof (priceObject[i].NDA_TRTN_1W) != "undefined")
                        { TRValue.push(priceObject[i].NDA_TRTN_1W); }
                    }
                    else if (tenor == 30) {
                        if (typeof (priceObject[i].NDA_TRTN_1M) != "undefined")
                        { TRValue.push(priceObject[i].NDA_TRTN_1M); }
                    }
                    else if (tenor == 90) {
                        if (typeof (priceObject[i].NDA_TRTN_3MT) != "undefined")
                        { TRValue.push(priceObject[i].NDA_TRTN_3MT); }
                    }
                    else if (tenor == 365) {
                        if (typeof (priceObject[i].NDA_YR_TRTN) != "undefined")
                        { TRValue.push(priceObject[i].NDA_YR_TRTN); }
                    }
                    else { }
                }

                TRValue.sort(NumAscSort)

                var TRMin = TRValue[0] 
                var TRMax = TRValue[TRValue.length - 1]
                var RangeSize = 100
                var SubRange = (TRMax + (TRMax - TRMin)/RangeSize - TRMin) / RangeSize
                //var mapRangeTRData = new Map();
                var arrNum = new Array(RangeSize)
                var arrMaxValue = new Array(RangeSize)
                for (i = 0; i < RangeSize; i++)
                {
                    arrNum[i] = 0;
                    arrMaxValue[i] = -1000;
                }
                for (CurTR = 0; CurTR < TRValue.length; CurTR++) {
                    var IndexRange = parseInt((TRValue[CurTR] - TRMin) / SubRange);
                    arrNum[IndexRange] = arrNum[IndexRange] + 1;

                    if (arrMaxValue[IndexRange] < TRValue[CurTR]) {
                        arrMaxValue[IndexRange] = TRValue[CurTR];
                    }

                }

                var nTotalCount = 0;
                var nMaxIndex = -1;
                var nMaxCount = 0;
                for (count = 0; count < arrNum.length; count++) {
                    if (arrNum[count] > nMaxCount) {
                        nMaxCount = arrNum[count]
                        nMaxIndex = count
                    }
                    nTotalCount = nTotalCount + arrNum[count];
                }

                var TRExpetation = 0.0;
                for (count = 0; count < arrNum.length; count++)
                {
                    TRExpetation += (((TRMin + SubRange * count) + (TRMin + SubRange * (count + 1))) / 2) * arrNum[count] / nTotalCount;
                }

                nMaxIndex = parseInt((TRExpetation - TRMin) / SubRange);

                var RankingValue = 0;
                if (arrMaxValue[nMaxIndex] >= parseInt(TRValue.length * 0.68)) {
                    if (nMaxIndex == 0) {
                        RankingValue = 10000;
                    }
                    else {
                        RankingValue = (arrMaxValue[nMaxIndex] / SubRange).toFixed(2);
                    }

                }
                else {
                    var MinRangeValue = -1000;
                    var MaxRangeValue = -1000;
                    var TotalCount = parseInt(nMaxCount / 2);
                    for (count = nMaxIndex - 1; count >= 0; count--) {
                        TotalCount = TotalCount + arrNum[count];
                        if (TotalCount >= parseInt(TRValue.length * 0.34)) {
                            MinRangeValue = arrMaxValue[count];
                            break;
                        }

                    }

                    TotalCount = parseInt(nMaxCount / 2);
                    for (count = nMaxIndex + 1; count < arrNum.length; count++) {
                        TotalCount = TotalCount + arrNum[count];
                        if (TotalCount >= parseInt(TRValue.length * 0.34)) {
                            MaxRangeValue = arrMaxValue[count];
                            break;
                        }

                    }

                    if (arrMaxValue[nMaxIndex] == -1000)
                    {
                        arrMaxValue[nMaxIndex] = ((TRMin + SubRange * nMaxIndex) + (TRMin + (SubRange * nMaxIndex + 1))) / 2;
                    }

                    var RankingValue = 0;
                    if (MinRangeValue == -1000) {
                        if (MaxRangeValue == arrMaxValue[nMaxIndex])
                        {
                            RankingValue = 10000;
                        }
                        else
                        {
                            RankingValue = (0.5 * arrMaxValue[nMaxIndex] / (MaxRangeValue - arrMaxValue[nMaxIndex])).toFixed(2) * 2;
                        }
                        
                    }
                    else if (MaxRangeValue == -1000) {
                        if (MinRangeValue == arrMaxValue[nMaxIndex]) {
                            RankingValue = 10000;
                        }
                        else {
                            RankingValue = (0.5 * arrMaxValue[nMaxIndex] / (arrMaxValue[nMaxIndex] - MinRangeValue)).toFixed(2);
                        }
                    }
                    else {

                        RankingValue = (arrMaxValue[nMaxIndex] / (MaxRangeValue - MinRangeValue)).toFixed(2);
                    }
                    if (RankingValue == 0.0)
                        RankingValue = 0.00;
                }
                mapRICTRRankingData.remove(ric);
                mapRICTRRankingData.put(ric, RankingValue)

                var structTRDate = new TRDistribution();
                for (i = 0; i < RangeSize; i++)
                {
                    var X = (TRMin + i * SubRange).toFixed(2).toString() + "%~" + (TRMin + (i + 1) * SubRange).toFixed(2).toString() + "%";
                    var Y = (arrNum[i] / nTotalCount * 100).toFixed(2);
                    structTRDate.Add( X, Y );
                }
                mapRICTRDistriDate.remove(ric);
                mapRICTRDistriDate.put(ric, structTRDate);
        }

        function NumAscSort(a, b) {
            return a - b
        }
        
        function StringToDate(DateStr) 
        { 
            var converted = Date.parse(DateStr); 
            var myDate = new Date(converted); 
            if (isNaN(myDate)) 
            { 
                var arys= DateStr.split('-'); 
                myDate = new Date(arys[0],--arys[1],arys[2]); 
            } 
            return myDate; 
        }

        function FormatDate(aDate) {
            if (typeof aDate == 'string') {
                aDate = StringToDate(aDate);
            }

            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            var day = aDate.getDate();
            var monthIndex = aDate.getMonth() + 1;
            var year = aDate.getFullYear();

            //return day + ' ' + monthNames[monthIndex] + ' ' + year;
            return year + "年" + monthIndex + "月" + day + "日";
        }
        
        function DateDiff(dtStart, dtEnd) {
            if (typeof dtStart == 'string') {
                dtStart = StringToDate(dtStart);
            }
            if (typeof dtEnd == 'string') {
                dtEnd = StringToDate(dtEnd);
            }

            return Math.abs(parseInt((dtEnd - dtStart) / 86400000));

        }


        function RankingCCIValue() {
            var RankingRICs = [];
            var keyArray = mapRICToCCIData.keys;
            for (i = 0; i < keyArray.length; i++) {
                var CCICalculator = mapRICToCCIData[keyArray[i]];
                var CCIValueArray = CCICalculator.CCIValueArray;
                var CCIValueLength = CCIValueArray.length;
                if (CCIValueLength > 2) {
                    var CCIValue1 = CCIValueArray[CCIValueLength - 1];
                    var CCIValue2 = CCIValueArray[CCIValueLength - 2];
                    if ((CCIValue1 > CCIValue2) && (CCIValue1 > 50.0)) {
                        RankingRICs.push(keyArray[i]);
                    }
                }
            }
        }

        function refresh() {
            //var varCalculator = new genvarcalculator($("#baseric_href").text(), $("#divcfric_href").text(), $("#atmivric_href").text(), $("#tenorlist").val());
            //varCalculator.calculate();
            //draw();
            var price_val = parseFloat($("#text_price").val());
            var rawyield_val = parseFloat($("#text_rawyield").val());
            var yield_val = parseFloat($("#text_yield").val());
            var iv_val = parseFloat($("#text_iv").val());
            var tenordays = parseFloat($("#tenorlist").val());

            if (price_val > 0 && iv_val > 0) {

                var xValues = [];
                var y1Values = [];
                var y2Values = [];
                var PrcGen = new PriceDistributionGenerator(price_val, rawyield_val - yield_val, iv_val, tenordays / 365.0);

                // var confidential
                var range_90 = PrcGen.GetConfidenceRange(0.9);
                $("#VARTable tr:eq(1) td:nth-child(2)").html(range_90[0].toFixed(2));
                $("#VARTable tr:eq(1) td:nth-child(3)").html(range_90[1].toFixed(2));

                var range_95 = PrcGen.GetConfidenceRange(0.95);
                $("#VARTable tr:eq(2) td:nth-child(2)").html(range_95[0].toFixed(2));
                $("#VARTable tr:eq(2) td:nth-child(3)").html(range_95[1].toFixed(2));

                var range_99 = PrcGen.GetConfidenceRange(0.99);
                $("#VARTable tr:eq(3) td:nth-child(2)").html(range_99[0].toFixed(2));
                $("#VARTable tr:eq(3) td:nth-child(3)").html(range_99[1].toFixed(2));

                // max lose and max gain
                var cur_price = price_val;
                if ($("#text_buyingprice").val().trim() != "") {
                    cur_price = parseFloat($("#text_buyingprice").val());
                }
                $("#VARTable tr:eq(1) td:nth-child(4)").html((cur_price - range_90[0]).toFixed(2));
                $("#VARTable tr:eq(1) td:nth-child(5)").html((range_90[1] - cur_price).toFixed(2));
                $("#VARTable tr:eq(2) td:nth-child(4)").html((cur_price - range_95[0]).toFixed(2));
                $("#VARTable tr:eq(2) td:nth-child(5)").html((range_95[1] - cur_price).toFixed(2));
                $("#VARTable tr:eq(3) td:nth-child(4)").html((cur_price - range_99[0]).toFixed(2));
                $("#VARTable tr:eq(3) td:nth-child(5)").html((range_99[1] - cur_price).toFixed(2));


                // draw chart
                var ret = PrcGen.GetDensityChartXYVals();

                xValues = ret[0];
                y1Values = ret[1];
                var ret2 = PrcGen.GetAccumulateChartXYVals();

                y2Values = ret2[1];
                drawChartXY(xValues, y1Values, y2Values);

            }


        }

        function range2possbility() {
            var lower_price = parseFloat($("#input_lowerprice").val());
            var upper_price = parseFloat($("#input_upperprice").val());

            if (lower_price > 0 && upper_price > 0) {
                var price_val = parseFloat($("#text_price").val());
                var rawyield_val = parseFloat($("#text_rawyield").val());
                var yield_val = parseFloat($("#text_yield").val());
                var iv_val = parseFloat($("#text_iv").val());
                var tenordays = parseFloat($("#tenorlist").val());

                if (price_val > 0 && iv_val > 0) {

                    var PrcGen = new PriceDistributionGenerator(price_val, rawyield_val - yield_val, iv_val, tenordays / 365.0);
                    var retParams = PrcGen.GetLogNormalParameter();
                    var xStart = retParams[0];
                    var poss = PrcGen.GetProbability(xStart, upper_price) - PrcGen.GetProbability(xStart, lower_price);
                    var poss = poss * 100;
                    $('#span_possiblity').html(poss.toFixed(2) + "%");

                }
            }
            else {
                $('#span_possiblity').html("");
            }
        }

        function addrictogrid() {
            var data = grid.getData();
            data.push({ ricname: $("#supportedriclist").val(), price: "", tradedate: "", onedayprice: "", onedaydate: "", onedaytr: "", oneweekprice: "", oneweekdate: "", oneweektr: "", onemonthprice: "", onemonthdate: "", onemonthtr: "", onequarterprice: "", onequarterdate: "", onequartertr: "", oneyearprice: "", oneyeardate: "", oneyeartr: "", totalreturn: "", atmivric: "" });
            grid.setData(data);
            grid.updateRowCount();
            grid.render();
        }

        function addalltogrid() {
            var data = grid.getData();
            $("#supportedriclist option").each(function (i) {
                data.push({ ricname: $(this).val(), price: "", tradedate: "", onedayprice: "", onedaydate: "", onedaytr: "", oneweekprice: "", oneweekdate: "", oneweektr: "", onemonthprice: "", onemonthdate: "", onemonthtr: "", onequarterprice: "", onequarterdate: "", onequartertr: "", oneyearprice: "", oneyeardate: "", oneyeartr: "", totalreturn: "", atmivric: "" });
                //alert($(this).text() + " : " + $(this).val());
            });

            grid.setData(data);
            grid.updateRowCount();
            grid.render();
        }

        function removeallfromgrid() {
            var data = grid.getData();
            data.splice(0, data.length);
            grid.setData(data);
            grid.updateRowCount();
            grid.render();
        }

        function refreshgrid() {
            var data = grid.getData();
            var ricnamearray = [];
            var atmivricarray = [];
            for (var i = 0; i < data.length; i++) {
                for (var j = 0; j < ricinfoarray.length; j++) {
                    if (data[i]["ricname"] == ricinfoarray[j]["ricname"]) {
                        break;
                    }
                }

                ricnamearray.push(data[i]["ricname"]);
            }
            grid.setData(data);
            subscribeall(ricnamearray);
        }

        var grid;
        var selectedrow = 0;
        var columns = [
                { id: "ricname", name: "RIC", field: "ricname", sortable: true },
                { id: "displayname", name: "Display Name", field: "displayname", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                { id: "price", name: "Trade Price", field: "price", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                { id: "tradedate", name: "Trade Date", field: "tradedate", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                { id: "ranking", name: "Ranking", field: "ranking", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" }
                //{ id: "onedayprice", name: "Close Price", field: "onedayprice", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "onedaydate", name: "Close Date", field: "onedaydate", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "onedaytr", name: "Day Total Return", field: "onedaytr", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "oneweekprice", name: "Week Close Price", field: "oneweekprice", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "oneweekdate", name: "Week Close Date", field: "oneweekdate", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "oneweektr", name: "Week Total Return", field: "oneweektr", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "onemonthprice", name: "Month Close Price", field: "onemonthprice", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "onemonthdate", name: "Month Close Date", field: "onemonthdate", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "onemonthtr", name: "Month Total Return", field: "onemonthtr", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "onequarterprice", name: "Quarter Close Price", field: "onequarterprice", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "onequarterdate", name: "Quarter Close Date", field: "onequarterdate", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "onequartertr", name: "Quarter Total Return", field: "onequartertr", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "oneyearprice", name: "Year Close Price", field: "oneyearprice", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "oneyeardate", name: "Year Close Date", field: "oneyeardate", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" },
                //{ id: "oneyeartr", name: "Year Total Return", field: "oneyeartr", sortable: true, cssClass: "align3 monospace", headerCssClass: "align3" }
        ];

        var options = {
            enableCellNavigation: true,
            enableColumnReorder: false,
            forceFitColumns: true,
            multiColumnSort: true,
            rowHeight: 27
        };

 /*       function StringToDate(DateStr) 
        { 
            var converted = Date.parse(DateStr); 
            var myDate = new Date(converted); 
            if (isNaN(myDate)) 
            { 
                //var delimCahar = DateStr.indexOf('/')!=-1?'/':'-'; 
                var arys= DateStr.split('-'); 
                myDate = new Date(arys[0],--arys[1],arys[2]); 
            } 
            return myDate; 
        } 
*/


        $(function () {

            var data = [];

            grid = new Slick.Grid("#MySlickGrid", data, columns, options);
            //grid.getCanvasNode().classList.add('selectable');

            grid.onSort.subscribe(function (e, args) {
                var cols = args.sortCols;
                data.sort(function (dataRow1, dataRow2) {
                    for (var i = 0, l = cols.length; i < l; i++) {
                        var field = cols[i].sortCol.field;
                        var sign = cols[i].sortAsc ? 1 : -1;
                        var value1 = parseFloat(dataRow1[field]), value2 = parseFloat(dataRow2[field]);

                        var result = 0;
                        if (isNaN(value1) && isNaN(value2)) {
                            var tmpVal1 = dataRow1[field];
                            var tmpVal2 = dataRow2[field];
                            if (tmpVal1 > tmpVal2)
                            {
                                result = 1 * sign;
                            }
                            else if (tmpVal1 < tmpVal2) {
                                result = -1 * sign;
                            }
                            else
                            {
                                result = 0;
                            }
                            
                        }
                        else {
                            if (isNaN(value1)) {
                                result = -1 * sign;
                            }
                            else if (isNaN(value2)) {
                                result = 1 * sign;
                            }
                            else {
                                result = (value1 == value2 ? 0 : (value1 > value2 ? 1 : -1)) * sign;
                            }
                        }

                        if (result != 0) {
                            return result;
                        }
                    }
                    return 0;
                });
                grid.invalidate();
                grid.render();
            });
            grid.setSelectionModel(new Slick.RowSelectionModel());
            grid.onDblClick.subscribe(function (e, args) {
                var cell = grid.getCellFromEvent(e);
                var row = cell.row;
                var data = grid.getData();
                var ricname = data[row]["ricname"];


                if (ricname != "") {
                    selectedrow = row;
                    $("#baseric_href").text(data[row]["ricname"]);
                    $("#displayname_href").text(data[row]["displayname"]);
                    $("#ricdivcf_href").text(data[row]["ricname"].replace(".","DIVCF."));
                    $("#text_onedayprice").val(data[row]["onedayprice"]);
                    $("#text_onedaydate").val(data[row]["onedaydate"]);
                    $("#text_onedaytr").val(data[row]["onedaytr"]);
                    $("#text_oneweekprice").val(data[row]["oneweekprice"]);
                    $("#text_oneweekdate").val(data[row]["oneweekdate"]);
                    $("#text_oneweektr").val(data[row]["oneweektr"]);
                    $("#text_onemonthprice").val(data[row]["onemonthprice"]);
                    $("#text_onemonthdate").val(data[row]["onemonthdate"]);
                    $("#text_onemonthtr").val(data[row]["onemonthtr"]);
                    $("#text_onequarterprice").val(data[row]["onequarterprice"]);
                    $("#text_onequarterdate").val(data[row]["onequarterdate"]);
                    $("#text_onequartertr").val(data[row]["onequartertr"]);
                    $("#text_oneyearprice").val(data[row]["oneyearprice"]);
                    $("#text_oneyeardate").val(data[row]["oneyeardate"]);
                    $("#text_oneyeartr").val(data[row]["oneyeartr"]);

                    if (mapRICTimeSeriesPriceData.containsKey(ricname))
                    {
                        var DataForChart = mapRICTimeSeriesPriceData.get(ricname);

                        var RSICalculator = mapRICToRSIData.get(ricname);
                        var TechRSI1Data = RSICalculator.RSI1ValueArray;
                        var TechRSI2Data = RSICalculator.RSI2ValueArray;
                        var TechRSI3Data = RSICalculator.RSI3ValueArray;

                        var CCICalculator = mapRICToCCIData.get(ricname);
                        var TechCCIData = CCICalculator.CCIValueArray;

                        var KDJCalculator = mapRICToKDJData.get(ricname);
                        var TechKData = KDJCalculator.KValueArray;
                        var TechDData = KDJCalculator.DValueArray;
                        var TechJData = KDJCalculator.JValueArray;

                        var MACalculator = mapRICToMAData.get(ricname);
                        var TechMA5Data = MACalculator.MA5ValueArray;
                        var TechMA10Data = MACalculator.MA10ValueArray;
                        var TechMA20Data = MACalculator.MA20ValueArray;
                        var TechMA30Data = MACalculator.MA30ValueArray;

                        TRDistrX = [];
                        TRDistrY = [];

                        var structTRDate = mapRICTRDistriDate.get(ricname);
                        TRDistrX = structTRDate.XCoordinate;
                        TRDistrY = structTRDate.YCoordinate;

                        RSIXData = [];
                        RSIY1Data = [];
                        RSIY2Data = [];
                        RSIY3Data = [];

                        CCIXData = [];
                        CCIY1Data = [];
                        CCIY2Data = [];

                        KDJXData = [];
                        KDJY1Data = [];
                        KDJY2Data = [];
                        KDJY3Data = [];
                        KDJY4Data = [];

                        MAXData = [];
                        MAY1Data = [];
                        MAY2Data = [];
                        MAY3Data = [];
                        MAY4Data = [];

                        TRDate = [];
                        TRValue = [];

                        for (var i = 0; i < DataForChart.length; i++)
                        {
                            //RSIY1Data.push(DataForChart[i].CLOSE);
                            RSIY1Data.push(TechRSI1Data[i]);
                            RSIY2Data.push(TechRSI2Data[i]);
                            RSIY3Data.push(TechRSI3Data[i]);
                            RSIXData.push(new Date(Date.parse(DataForChart[i].NDA_DATE.substr(0, 10))));

                            CCIY2Data.push(TechCCIData[i]);
                            CCIXData.push(new Date(Date.parse(DataForChart[i].NDA_DATE.substr(0, 10))));

                            KDJY1Data.push(DataForChart[i].CLOSE);
                            KDJY2Data.push(TechKData[i]);
                            KDJY3Data.push(TechDData[i]);
                            KDJY4Data.push(TechJData[i]);
                            KDJXData.push(new Date(Date.parse(DataForChart[i].NDA_DATE.substr(0, 10))));

                            MAY1Data.push(TechMA5Data[i]);
                            MAY2Data.push(TechMA10Data[i]);
                            MAY3Data.push(TechMA20Data[i]);
                            MAY4Data.push(TechMA30Data[i]);
                            MAXData.push(new Date(Date.parse(DataForChart[i].NDA_DATE.substr(0, 10))));

                            TRDate.push(new Date(Date.parse(DataForChart[i].NDA_DATE.substr(0, 10))));
                            var tenor = $("#tenorlist").val()
                            if (tenor == 1) {
                                { TRValue.push(DataForChart[i].NDA_TRTN); }
                            }
                            else if (tenor == 7) {
                                { TRValue.push(DataForChart[i].NDA_TRTN_1W); }
                            }
                            else if (tenor == 30) {
                                { TRValue.push(DataForChart[i].NDA_TRTN_1M); }
                            }
                            else if (tenor == 90) {
                                { TRValue.push(DataForChart[i].NDA_TRTN_3MT); }
                            }
                            else if (tenor == 365) {
                                { TRValue.push(DataForChart[i].NDA_YR_TRTN); }
                            }
                            else { }



                        }

                        

                        var ip1 = "";
                        var rPort1 = document.getElementsByName("group1");
                        for (i = 0; i < rPort1.length; i++) {
                            if (rPort1[i].checked)
                                ip1 = rPort1[i].value;
                            if (ip1 == "RSI1")
                                RSIchart1();
                            else if (ip1 == "CCI1")
                                CCIchart1();
                            else if (ip1 == "KDJ1")
                                KDJchart1();
                            else if (ip1 == "TotalReturn1")
                                TR2chart1();
                            else if (ip1 == "MA1")
                                MAchart1();
                            else if (ip1 == "TotalReturn3")
                                TR1chart1();

                        }

                        var ip2 = "";
                        var rPort2 = document.getElementsByName("group2");
                        for (i = 0; i < rPort2.length; i++) {
                            if (rPort2[i].checked)
                                ip2 = rPort2[i].value;
                            if (ip2 == "RSI2")
                                RSIchart2();
                            else if (ip2 == "CCI2")
                                CCIchart2();
                            else if (ip2 == "KDJ2")
                                KDJchart2();
                            else if (ip2 == "TotalReturn2")
                                TR2chart2();
                            else if (ip2 == "MA2")
                                MAchart2();
                            else if (ip2 == "TotalReturn4")
                                TR1chart2();
                        }

                    }

                    //refresh();
                }
            });
        })


    </script>
</head>
<body onload="initialize()">
    <jet-app mode="release" appid="EquityVision" apptitle="Equity Vision">
    <jet-plugin-quotes></jet-plugin-quotes>
    <jet-plugin-timeseries></jet-plugin-timeseries>
    <jet-plugin-quicktips></jet-plugin-quicktips>
    <jet-plugin-apphits core></jet-plugin-apphits>
	<div class="flex-row" style="width: inherit;height: 100%;">
	   <div class="flex-item flex-split1 flex-col" style="width:582px; float:right; height: 864px;">
           <br />
           <header class="level1">
            <h1>  EQUITY VISION</h1>
            </header>
           <br />
	      <div class="content-spacer">
			Exchange:
              <select id="exchangelist" style="width:800px;" >
				
			</select>
              &nbsp;&nbsp;
              RIC:  &nbsp;
			<select id="supportedriclist" class="select2-offscreen" style="width:120px;display:inline-block" >
				
			</select>
              <button class="cta" style="width:90px" onclick="javascript:addrictogrid();">Add One</button>
              &nbsp;&nbsp;&nbsp;&nbsp;
              <button class="cta" style="width:90px" onclick="javascript:addalltogrid();">Add All</button>
            &nbsp;&nbsp;&nbsp;&nbsp;
            
	      </div>

           <br />
           <div class="content-spacer">
               Rank By:&nbsp;&nbsp;
               <select id="RankingType"  style="width:80px;" >		
			   </select> &nbsp;&nbsp;
                 Tenor:
               
                <select id="tenorlist"  style="width:120px;display:inline-block">
				
			    </select>
               
               
               <button class="button-alt2" style="width:90px" onclick="javascript:refreshgrid();">Refresh Grid</button>&nbsp;&nbsp;&nbsp;&nbsp;
               <button class="button-alt1" style="width:90px" onclick="javascript:removeallfromgrid();">Remove All</button>
           </div>

           <br />

         <div class="colorBlock-content content-spacer">
                    <a id="baseric_href" href="javascript:void(0);" onclick="openquote(this.text)" class="extLink"></a>
                    &nbsp;&nbsp;&nbsp;&nbsp;
                    <a id="displayname_href" href="javascript:void(0);" onclick="opencompany(baseric_href.text)" class="extLink"></a>
             &nbsp;&nbsp;&nbsp;&nbsp;
                    <a id="ricdivcf_href" href="javascript:void(0);" onclick="openquote(this.text)" class="extLink"></a>
                </div>
           
           <div id="MySlickGrid" color="yellow" style="width:100%; height:710px; border: 1px solid #0a0a0a;"></div>

  
	   </div>

        <div style="width:20px;float:right;"></div>

        <div style="width: auto; float:right; height: 864px;">
            <div class="colorBlock" style="width:98%; left: 0px;">
                <table id="ParameterTable" class="l-table s-table3  links-alt-color" style="width:98%; font-size:12px;border-collapse:collapse;" >
			        <tbody class="l-table s-table3  links-alt-color" >
			            <tr class="l-table-row s-header-row">
                            <td class="l-table-cell align3"  style="font-weight:bold;border:solid"></td>
				            <td class="l-table-cell align3"  style="font-weight:bold;border:solid">1 Day</td>
				            <td class="l-table-cell  align3"  style="font-weight:bold;border:solid">1 Week</td>
				            <td class="l-table-cell  align3"  style="font-weight:bold;border:solid">1 Month</td>
				            <td class="l-table-cell  align3"  style="font-weight:bold;border:solid">1 Quarter</td>
				            <td class="l-table-cell  align3"  style="font-weight:bold;border:solid">1 Year</td>
			            </tr>
			            <tr class="l-table-row">
                            <td class="l-table-cell align3"  style="font-weight:bold;border:solid">Buy Price</td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_onedayprice" readonly type="text" style="width:110px;" ></td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_oneweekprice" readonly type="text" style="width:110px;" ></td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_onemonthprice" readonly type="text" style="width:110px;" ></td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_onequarterprice" readonly type="text" style="width:110px;" ></td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_oneyearprice" readonly type="text" style="width:110px;" ></td>
			            </tr>
                        <tr class="l-table-row">
                            <td class="l-table-cell align3"  style="font-weight:bold;border:solid">Buy Date</td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_onedaydate" type="text" readonly style="width:110px;" ></td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_oneweekdate" type="text" readonly style="width:110px;" ></td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_onemonthdate" type="text" readonly style="width:110px;" ></td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_onequarterdate" type="text" readonly style="width:110px;" ></td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_oneyeardate" type="text" readonly style="width:110px;" ></td>
			            </tr>
                        <tr class="l-table-row">
                            <td class="l-table-cell align3"  style="font-weight:bold;border:solid">Total Return</td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_onedaytr" type="text" readonly style="width:110px;" ></td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_oneweektr" type="text" readonly style="width:110px;" ></td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_onemonthtr" type="text" readonly style="width:110px;" ></td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_onequartertr" type="text" readonly style="width:110px;" ></td>
				            <td class="l-table-cell align3 monospace" style="border:solid" ><input id="text_oneyeartr" type="text" readonly style="width:110px;" ></td>
			            </tr>
			        </tbody>
		    </table>
            </div>
            <br />
            <div id="charttable">
            <input name="group1" id="RSI1" type="radio" value="RSI1" checked onclick="javascript: RSIchart1();" /><label for="RSI1">RSI</label>
            <input name="group1" id="CCI1" type="radio" value="CCI1" onclick="javascript: CCIchart1();" /><label for="CCI1">CCI</label>
            <input name="group1" id="KDJ1" type="radio" value="KDJ1" onclick="javascript: KDJchart1();" /><label for="KDJ1">KDJ</label>
            <input name="group1" id="MA1" type="radio" value="MA1" onclick="javascript: MAchart1();" /><label for="MA1">MA</label>
            <input name="group1" id="TotalReturn1" type="radio" value="TotalReturn1" onclick="javascript: TR2chart1();" /><label for="TotalReturn1">Total Return</label>
            <input name="group1" id="TotalReturn3" type="radio" value="TotalReturn3" onclick="javascript: TR1chart1();" /><label for="TotalReturn3">Total Return Distribution</label>
	        <div id="chart1" style="width:100%;height:318px; ">
	        </div>  
            <br />
            <input name="group2" id="RSI2" type="radio" value="RSI2" checked onclick="javascript: RSIchart2();" /><label for="RSI2">RSI</label>
            <input name="group2" id="CCI2" type="radio" value="CCI2" onclick="javascript: CCIchart2();" /><label for="CCI2">CCI</label>
            <input name="group2" id="KDJ2" type="radio" value="KDJ2" onclick="javascript: KDJchart2();" /><label for="KDJ2">KDJ</label>
            <input name="group2" id="MA2" type="radio" value="MA2" onclick="javascript: MAchart2();" /><label for="MA2">MA</label>            
            <input name="group2" id="TotalReturn2" type="radio" value="TotalReturn2" onclick="javascript: TR2chart2();" /><label for="TotalReturn2">Total Return</label>
            <input name="group2" id="TotalReturn4" type="radio" value="TotalReturn4" onclick="javascript: TR1chart2();" /><label for="TotalReturn4">Total Return Distribution</label>
                <div id="chart2" style="width:100%;height:318px; ">
	        </div>  
                </div>
        </div>

	</div>
	</jet-app>
</body>
</html>
